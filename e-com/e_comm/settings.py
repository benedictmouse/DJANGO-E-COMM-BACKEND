"""
Django settings for e_comm project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^nq%qp@e*t1%@6rgmsnf%1e4=&bfo2xrd9s!6p-v_bi7@75(#6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'users',
    'store',
    'corsheaders'
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    
}

CORS_ALLOW_ALL_ORIGINS = True

# simplejwt settings
from datetime import timedelta
SIMPLE_JWT={
    'ACCES_TOKEN_LIFETIME':timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME':timedelta(days=7),
    'ROTATE_REFRESH_TOKENS':True,
    'BLACKLIST_AFTER_ROTATION':True,
    'AUTH_HEADER_TYPES':('bearer',),
    'USER_ID_FIELD':'id',
    'USER_ID_CLAIM':'user_id',
    'USER_ID_FIELD': 'id',  # Change if your User model has a different primary key
    'USER_ID_CLAIM': 'user_id',  # What claim in the token contains the user's ID
    'ALGORITHM': 'HS256',  # Default hashing algorithm (HS256, RS256, etc.)
    'SIGNING_KEY': 'your-secret-key',  # Keep this in environment variables for security!
    'VERIFYING_KEY': None,  # Needed if using asymmetric signing (e.g., RS256)
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),  
    'TOKEN_TYPE_CLAIM': 'token_type',  # Adds token type claim (access/refresh)
    'JTI_CLAIM': 'jti',  
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'e_comm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'e_comm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'e_com',
        'USER': 'postgres',
        'PASSWORD': '1738',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.CustomUser'

# benedictomondi60@gmail.com 1738


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "your_email@gmail.com"
EMAIL_HOST_PASSWORD = "your_email_password"


# Since you've structured the users app and decided to use Djangoâ€™s built-in authentication with email-based login, let's quickly review whether it's complete before moving forward.

# âœ… Are We Done with Users?
# To confirm, your users app should have:
# âœ” Custom User Model (email-based login)
# âœ” Registration & Login with JWT Authentication
# âœ” User Profile Management (optional)
# âœ” API Endpoints for Authentication (register, login, logout)

# Next Steps Based on Your Structure
# With authentication in place, hereâ€™s the recommended order of tackling the remaining parts of your e-commerce backend:

# ðŸ”¹ Step 1: Store App - Products, Categories, Inventory (Recommended Next)
# Define models for:
# Product (name, description, price, stock, image, etc.)
# Category (relationships with products)
# Inventory (track stock availability)
# Create views for CRUD operations
# Set up serializers to expose product/category data via API
# ðŸ”¹ Why This First?
# The frontend will need product data, so letâ€™s build this before handling cart/orders.
# ðŸ”¹ Step 2: Shopping Cart
# Implement cart functionality using Django sessions or database storage.
# Allow users to add/remove items from the cart.
# Store cart data in a Cart model or use Djangoâ€™s built-in session storage.
# ðŸ”¹ Step 3: Orders & Checkout
# Implement an Order model (linking user, products, and payment status).
# Create order processing logic.
# Connect with the payments app.
# ðŸ”¹ Step 4: Payment Integration
# Implement Stripe, PayPal, or another payment provider.
# Link payments to orders.
# ðŸ”¹ Step 5: API Integration
# Ensure all endpoints are working correctly for the frontend.
# ðŸš€ Next Step: Start with the store app by defining the Product and Category models! Do you want me to draft the models for you?

# i have finished creating the user app that involves registration and login using jwt userprofile management and api endpoints i have also made the identify vendors and restict product management to them what is the next step please
